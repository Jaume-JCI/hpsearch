# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/config/manager_factory.ipynb (unless otherwise specified).

__all__ = ['ManagerFactory', 'experiment_manager']

# Cell
import inspect
import shutil
import hpsearch
import os
import logging

experiment_manager = None

class ManagerFactory (object):
    def __init__ (self, allow_base_class=True):
        self.allow_base_class = allow_base_class
        self.logger = logging.getLogger("experiment_manager")

    def register_manager (self, experiment_manager_to_register):
        global experiment_manager
        experiment_manager = experiment_manager_to_register

    def get_destination_path (self):
        destination_path_folder = os.path.dirname (hpsearch.__file__)
        destination_path_folder = f'{destination_path_folder}/app_config'
        destination_path_module = f'{destination_path_folder}/subclassed_manager.py'
        return destination_path_folder, destination_path_module

    def write_manager (self, experiment_manager):
        name_subclass = experiment_manager.__class__.__name__
        try:
            source_path = inspect.getfile(experiment_manager.__class__)

            destination_path_folder, destination_path_module = self.get_destination_path()
            os.makedirs(destination_path_folder, exist_ok=True)
            shutil.copy (source_path, destination_path_module)

            f = open (f'{destination_path_folder}/subclassed_manager_import.py', 'wt')
            f.write (f'from hpsearch.app_config.subclassed_manager import {name_subclass} as Manager')
            f.close()
        except Exception as e:
            print (f'write_manager failed with exception {e}')

    def get_experiment_manager (self):
        if experiment_manager is not None:
            em = experiment_manager
            self.logger.debug ('returning registered experiment manager')
        else:
            self.logger.debug ('experiment manager not registered yet, importing experiment manager')
            try:
                from ..app_config.subclassed_manager_import import Manager
                em = Manager()
                self.logger.debug ('returning subclassed manager')
            except ImportError:
                if not self.allow_base_class:
                    raise ImportError (f'it was not possible to import subclassed manager, and allow_base_class=False')
                self.logger.debug ('importing base class ExperimentManager')
                from ..experiment_manager import ExperimentManager
                em = ExperimentManager()

        self.logger.debug (f'returning experiment manager {em}')
        return em

    def delete_module (self):
        destination_path_folder, destination_path_module = self.get_destination_path()
        self.logger.debug (destination_path_module)
        if os.path.exists(destination_path_module):
            self.logger.debug ('deleting')
            os.remove(destination_path_module)