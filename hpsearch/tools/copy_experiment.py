# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/tools/copy_experiment.ipynb (unless otherwise specified).

__all__ = ['copy_experiment_contents', 'copy_code', 'ExperimentManager', 'main', 'copy_experiment_contents_and_code',
           'copy_code_with_experiment_paths', 'parse_args', 'parse_arguments_and_run', 'main']

# Cell
import argparse
import sys
import inspect
import shutil
import joblib
import os
from distutils.dir_util import copy_tree

from ..experiment_manager import mypprint
from ..config.hpconfig import get_experiment_manager

# Cell
def copy_experiment_contents (experiment=None, root=None, destination_folder='.',
                              run_number=0, em_args=None):

    os.makedirs (destination_folder, exist_ok=True)

    em = get_experiment_manager ()

    # 3 write code about calling run_experiment
    root_path = em.get_path_experiments(folder=root)
    path_root_experiment = em.get_path_experiment (experiment, root_path=root_path)
    shutil.copy (f'{path_root_experiment}/parameters.pk',
                 f'{destination_folder}/separate_parameters.pk')
    path_results = em.get_path_results (experiment, run_number, root_folder=root)
    copy_tree (f'{path_results}', destination_folder)

# Cell
def copy_code (source_folder, destination_folder, destination_file=None,
               path_root_experiment=None):

    os.makedirs (destination_folder, exist_ok=True)
    destination_path = (f'{destination_folder}/best_experiment.py' if destination_file is None
                        else f'{destination_folder}/{destination_file}')
    path_root_experiment = (source_folder if path_root_experiment is None
                            else path_root_experiment)
    path_results = source_folder
    fdest = open (destination_path, 'wt')

    # 1 write code from base manager
    base_manager = (
'''
class ExperimentManager ():
    def __init__ (**kwargs):
        pass
'''
    )
    fdest.write (base_manager)

    # 2 write code from subclassed manager
    em = get_experiment_manager ()
    source_path = inspect.getfile(em.__class__)
    fsrc = open (source_path, 'rt')
    original = fsrc.read ()
    fsrc.close ()
    original.replace ('from hpsearch.experiment_manager import ExperimentManager', '')
    fdest.write (original)

    # 3 write code about calling run_experiment
    parameters, other_parameters = joblib.load (f'{path_root_experiment}/parameters.pk')
    parameters = mypprint(parameters, dict_name='    parameters')
    run_experiment = (
f'''
def main (**kwargs):
    all_parameters = joblib.load (f{path_results}/parameters.pk)
{parameters}
    all_parameters.update (parameters)
    all_parameters.update (**kwargs)
    em = {em.__class__.__name__} ()
    em.run_experiment (all_parameters, path_results)

if __name__ == '__main__':
    main ()
'''
    )
    fdest.write (run_experiment)
    fdest.close ()

# Cell
def copy_experiment_contents_and_code (experiment=None, root=None,
                                       content_dst_folder='.',
                                       code_dst_folder='.',
                                       run_number=0,
                                       destination_file=None, em_args=None):
    copy_experiment_contents (experiment=experiment, root=root,
                              destination_folder=content_dst_folder,
                              run_number=run_number, em_args=em_args)
    copy_code (content_dst_folder, code_dst_folder, destination_file=destination_file,
               path_root_experiment=content_dst_folder)

# Cell
def copy_code_with_experiment_paths (experiment=None, root=None, destination_folder='.', destination_file=None,
                     run_number=0, em_args=None):
    em = get_experiment_manager ()
    root_path = em.get_path_experiments(folder=root)
    path_root_experiment = em.get_path_experiment (experiment, root_path=root_path)
    path_results = em.get_path_results (experiment, run_number, root_folder=root)
    copy_code (path_results, destination_folder, destination_file=destination_file,
               path_root_experiment=path_root_experiment)


# Cell
def parse_args (args):
    parser = argparse.ArgumentParser(description='run experiment')
    parser.add_argument('-d', '--debug', action= "store_true")
    parser.add_argument('-e', '--experiments', type=int, nargs='+', default=None,  help="experiment numbers")
    parser.add_argument('--epochs', type=int, default=None,  help="number of epochs")
    parser.add_argument('-u', '--unfinished', action= "store_true")
    parser.add_argument('--runs', type=int, default=None,  help="number of runs")
    parser.add_argument('--root', type=str, default=None, help='name of root folder')
    parser.add_argument('-v', '--verbose', type=int, default=None, help='verbosity level: 0, 1, 2')
    pars = parser.parse_args(args)

    return pars

def parse_arguments_and_run (args,
                             # for tests
                             em_args = None):

    pars = parse_args(args)

    other_parameters = dict(
                            use_process=not pars.debug,
                            root_folder=pars.root
                            )

    em = get_experiment_manager ()
    if pars.verbose is not None:
        em.set_verbose (pars.verbose)
    if em_args is not None:
        for k in em_args:
            setattr (em, k, em_args[k])

    if pars.epochs is not None:
        parameters = {em.name_epoch: int(pars.epochs)}
        other_parameters.update (prev_epoch=True)
        check_experiment_matches=False
    else:
        check_experiment_matches=True
        parameters = {}
    if pars.unfinished:
        other_parameters.update (check_finished=True, use_previous_best=False)



    em.rerun_experiment (experiments=pars.experiments, nruns=pars.runs, root_folder=pars.root,
                         parameters=parameters, other_parameters=other_parameters,
                         check_experiment_matches=check_experiment_matches)

def main():
    parse_arguments_and_run (sys.argv[1:])