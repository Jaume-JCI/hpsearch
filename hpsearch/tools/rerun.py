# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/tools/rerun.ipynb (unless otherwise specified).

__all__ = ['rerun', 'parse_args', 'parse_arguments_and_run', 'main']

# Cell
import argparse
import sys

from ..config.hpconfig import get_experiment_manager
import hpsearch.config.hp_defaults as dflt

# Cell
def rerun (experiments=None, root=None, epochs=None, runs=None, unfinished=False,
           verbose=None, debug=False, em_args=None, store=False, from_dict=False,
           range_exp=None, min_iterations=None, manager_path=dflt.manager_path):
    other_parameters = dict(
                            use_process=not debug,
                            root_folder=root
                            )
    if range_exp is not None:
        assert len(range_exp) == 2
        experiments += range(range_exp[0], range_exp[1])

    em = get_experiment_manager (manager_path=manager_path)
    if verbose is not None:
        em.set_verbose (verbose)
    if em_args is not None:
        for k in em_args:
            setattr (em, k, em_args[k])

    if epochs is not None:
        parameters = {em.name_epoch: int(epochs)}
        other_parameters.update (prev_epoch=True)
        check_experiment_matches=False
    else:
        check_experiment_matches=True
        parameters = {}
    if unfinished:
        other_parameters.update (check_finished=True, use_previous_best=False)
    if store:
        other_parameters.update (use_last_result=True)
        if from_dict:
            other_parameters.update (use_last_result_from_dict=True)
        if min_iterations is not None:
            other_parameters.update (min_iterations=min_iterations)


    em.rerun_experiment (experiments=experiments, nruns=runs, root_folder=root,
                         parameters=parameters, other_parameters=other_parameters,
                         check_experiment_matches=check_experiment_matches)

# Cell
def parse_args (args):
    parser = argparse.ArgumentParser(description='run experiment')
    parser.add_argument('-d', '--debug', action= "store_true")
    parser.add_argument('-e', '--experiments', type=int, nargs='+', default=[],  help="experiment numbers")
    parser.add_argument('--range-exp', type=int, nargs='+', default=None, help='include this range of experiments')
    parser.add_argument('--epochs', type=int, default=None,  help="number of epochs")
    parser.add_argument('-u', '--unfinished', action= "store_true")
    parser.add_argument('--runs', type=int, default=None,  help="number of runs")
    parser.add_argument('-s', '--store', action= "store_true",  help="store the result from experiments that were not saved in csv file.")
    parser.add_argument('-f', '--from-dict', action= "store_true",  help="when storing the result from experiments that were not saved in csv file, we use the dictionary of results typically named dict_results.pk")
    parser.add_argument('--min-iterations', type=int, default=None,  help="number of iterations to be present in model history in order to consider the experiment good enough for storage.")
    parser.add_argument('--root', type=str, default=None, help='name of root folder')
    parser.add_argument('-v', '--verbose', type=int, default=None, help='verbosity level: 0, 1, 2')
    parser.add_argument('-p', '--path', default=dflt.manager_path, type=str)
    pars = parser.parse_args(args)

    return pars

def parse_arguments_and_run (args, em_args = None):

    pars = parse_args(args)
    pars = vars(pars)
    pars['manager_path'] = pars['path']
    del pars['path']
    rerun (**pars, em_args=em_args)

def main():
    parse_arguments_and_run (sys.argv[1:])