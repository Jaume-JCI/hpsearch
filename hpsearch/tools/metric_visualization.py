# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/tools/metric_visualization.ipynb (unless otherwise specified).

__all__ = ['metric_visualization', 'parse_args', 'parse_arguments_and_visualize', 'main']

# Cell
import warnings
warnings.filterwarnings('ignore')

import argparse
import sys
sys.path.append('.')
sys.path.append('src')
import pandas as pd
import pickle
import hpsearch.visualization.experiment_visualization as ev
from ..config.hpconfig import get_path_experiments
from ..config.hpconfig import get_default_operations

def metric_visualization (experiments=[-1,-2], run_number=0, root_folder=None, metric=None, op = None,
                          parameters=None, name_file='model_history.pk', visualization_options = {},
                          backend='plotly'):

    default_operations = get_default_operations ()
    if root_folder is None:
        root_folder = default_operations.get('root', 'results')
    if metric is None:
        metric = default_operations.get('metric', 'accuracy')
    if op is None:
        op = default_operations.get('op', 'min')

    # metrics
    if type(metric) is str:
        metrics = [metric]
    else:
        metrics = metric

    for i in range(len(experiments)):
        if experiments[i] == -1:
            root_path = get_path_experiments (folder = root_folder)
            experiment_number = pickle.load(open('%s/current_experiment_number.pkl' %root_path,'rb'))
            experiments[i] = experiment_number

        if experiments[i] == -2:
            root_path = get_path_experiments (folder = root_folder)
            df = pd.read_csv('%s/experiments_data.csv' %root_path,index_col=0)
            if op=='max':
                experiments[i] = df['0_%s' %metric].idxmax()
            else:
                experiments[i] = df['0_%s' %metric].idxmin()

    if 'visualization' in visualization_options.keys():
        visualization = visualization_options.pop('visualization')
    else:
        visualization = 'history'

    ev.visualize_experiments(visualization=visualization,
                             experiments=experiments, run_number=run_number, root_folder=root_folder,metrics=metrics,
                             parameters=parameters, name_file=name_file, **visualization_options,
                             backend=backend)

def parse_args(args):
    parser = argparse.ArgumentParser(description='show metrics about experiments')
    # Datasets
    parser.add_argument('-e', nargs='+', default=[-1, -2], type=int,
                        help="experiments")
    parser.add_argument('-m', '--metric', nargs='+', type=str, default=None, help="metrics")
    parser.add_argument('--root', type=str, default=None)
    parser.add_argument('-l','--labels',nargs='+', default=None, type=str)
    parser.add_argument('--run', default=0, type=int)
    parser.add_argument('--op', default=None, type=str)
    parser.add_argument('-b', '--backend', default='visdom', type=str)
    parser.add_argument('-f', '--file', default='model_history.pk', type=str)
    parser.add_argument('-v', '--visualization', default='{}', type=str)

    pars = parser.parse_args(args)

    pars.visualization = eval(pars.visualization)

    return pars

def parse_arguments_and_visualize (args):

    pars = parse_args(args)

    metric_visualization (pars.e, run_number=pars.run, root_folder=pars.root, metric=pars.metric,
                          parameters=pars.labels, name_file=pars.file, backend=pars.backend,
                          visualization_options=pars.visualization)

def main():

    parse_arguments_and_visualize (sys.argv[1:])

