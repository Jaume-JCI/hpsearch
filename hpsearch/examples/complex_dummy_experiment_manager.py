# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/examples/complex_dummy_experiment_manager.ipynb (unless otherwise specified).

__all__ = ['ComplexDummyExperimentManager', 'run_multiple_experiments', 'remove_previous_experiments']

# Cell
from .dummy_experiment_manager import DummyExperimentManager, FakeModel
import hpsearch
import os
from ..visualization import plot_utils

# Cell
class ComplexDummyExperimentManager (DummyExperimentManager):

    def __init__ (self, model_file_name='model_weights.pk', **kwargs):
        super().__init__ (model_file_name=model_file_name, **kwargs)
        self.raise_error_if_run = False

    def run_experiment (self, parameters={}, path_results='./results'):

        # useful for testing: in some cases the experiment manager should not call run_experiment
        if self.raise_error_if_run:
            raise RuntimeError ('run_experiment should not be called')

        # extract hyper-parameters used by our model. All the parameters have default values if they are not passed.
        offset = parameters.get('offset', 0.5)   # default value: 0.5
        rate = parameters.get('rate', 0.01)   # default value: 0.01
        epochs = parameters.get('epochs', 10) # default value: 10
        noise = parameters.get('noise', 0.0)
        if parameters.get('actual_epochs') is not None:
            epochs = parameters.get('actual_epochs')

        # other parameters that do not form part of our experiment definition
        # changing the values of these other parameters, does not make the ID of the experiment change
        verbose = parameters.get('verbose', True)

        # build model with given hyper-parameters
        model = FakeModel (offset=offset, rate=rate, epochs=epochs, noise = noise, verbose=verbose)

        # load training, validation and test data (fake step)
        model.load_data()

        # start from previous experiment if indicated by parameters
        path_results_previous_experiment = parameters.get('prev_path_results')
        if path_results_previous_experiment is not None:
            model.load_model_and_history (path_results_previous_experiment)

        # fit model with training data
        model.fit ()

        # save model weights and evolution of accuracy metric across epochs
        model.save_model_and_history(path_results)

        # simulate ctrl-c
        if parameters.get ('halt', False):
            raise KeyboardInterrupt ('stopped')

        # evaluate model with validation and test data
        validation_accuracy, test_accuracy = model.score()

        # store model
        self.model = model

        # the function returns a dictionary with keys corresponding to the names of each metric.
        # We return result on validation and test set in this example
        dict_results = dict (validation_accuracy = validation_accuracy,
                             test_accuracy = test_accuracy)

        return dict_results


# Cell
import shutil
import os
import hpsearch.examples.dummy_experiment_manager as dummy_em

def run_multiple_experiments (**kwargs):
    dummy_em.run_multiple_experiments (EM=ComplexDummyExperimentManager, **kwargs)

def remove_previous_experiments ():
    dummy_em.remove_previous_experiments (EM=ComplexDummyExperimentManager)