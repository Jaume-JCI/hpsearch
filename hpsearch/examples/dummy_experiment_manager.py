# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/examples/dummy_experiment_manager.ipynb (unless otherwise specified).

__all__ = ['FakeModel', 'DummyExperimentManager', 'run_multiple_experiments', 'remove_previous_experiments']

# Cell
import numpy as np

class FakeModel (object):

    overfitting_epochs = 20

    def __init__ (self, offset=0.5, rate=0.01, epochs=10, noise=0.0):
        # hyper-parameters
        self.offset = offset
        self.rate = rate
        self.epochs = epochs

        # fake internal weight
        self.weight = 0

        # fake accuracy
        self.accuracy = self.offset

        # noise
        self.noise = noise

    def fit (self):
        number_epochs = int(self.epochs)
        print (f'fitting model with {number_epochs} epochs')
        for epoch in range(number_epochs):
            self.weight += self.rate
            if epoch < self.overfitting_epochs:
                self.accuracy += self.rate
            else:
                self.accuracy -= self.rate
            print (f'epoch {epoch}: accuracy: {self.accuracy}')

    def score (self):
        # validation accuracy
        print (f'noise: {self.noise}')
        validation_accuracy = self.accuracy + np.random.randn() * self.noise

        # test accuracy
        if self.epochs < 10:
            test_accuracy = self.accuracy + 0.1
        else:
            test_accuracy = self.accuracy - 0.1
        test_accuracy = test_accuracy + np.random.randn() * self.noise

        # make accuracy be in interval [0,1]
        validation_accuracy = max(min(validation_accuracy, 1.0), 0.0)
        test_accuracy = max(min(test_accuracy, 1.0), 0.0)

        return validation_accuracy, test_accuracy

    # fake load_data which does nothing
    def load_data (self):
        pass

# Cell
from ..experiment_manager import ExperimentManager
import hpsearch
import os

class DummyExperimentManager (ExperimentManager):

    def __init__ (self):
        super().__init__()

    def run_experiment (self, parameters={}, path_results='./results'):
        # extract hyper-parameters used by our model. All the parameters have default values if they are not passed.
        offset = parameters.get('offset', 0.5)   # default value: 0.5
        rate = parameters.get('rate', 0.01)   # default value: 0.01
        epochs = parameters.get('epochs', 10) # default value: 10

        # other parameters that do not form part of our experiment definition
        # changing the values of these other parameters, does not make the ID of the experiment change
        noise = parameters.get('noise', 0.0)

        # build model with given hyper-parameters
        model = FakeModel (offset=offset, rate=rate, epochs=epochs, noise = noise)

        # load training, validation and test data (fake step)
        model.load_data()

        # fit model with training data
        model.fit ()

        # evaluate model with validation and test data
        validation_accuracy, test_accuracy = model.score()

        # the function returns a dictionary with keys corresponding to the names of each metric.
        # We return result on validation and test set in this example
        dict_results = dict (validation_accuracy = validation_accuracy,
                             test_accuracy = test_accuracy)

        return dict_results

    # implementing the following method is not necessary but recommended
    def get_default_parameters (self, parameters):
        '''Indicate the default value for each of the hyper-parameters used'''
        defaults = dict(offset=0.5,
                        rate=0.01,
                        epochs=10)
        return defaults

    # implementing the following method is not necessary but recommended
    def get_path_experiments (self, path_experiments = None, folder = None):
        return f'{os.path.dirname(hpsearch.__file__)}/../results'

    # implementing the following method is not necessary but recommended
    def get_path_alternative  (self, path_results):
        return path_results

# Cell
def run_multiple_experiments (nruns=1, noise=0.0):
    em = DummyExperimentManager ()
    parameters_single_value = dict(rate=0.03)   # parameters where we use a fixed value
    parameters_multiple_values=dict(offset=[0.1, 0.3, 0.6], epochs=[5, 15, 30]) # parameters where we try multiple values
    other_parameters = dict(noise=noise) # parameters that control other aspects that are not part of our experiment definition (a new experiment is not created if we assign different values for these parametsers)
    em.grid_search (log_message='fixed rate, multiple epochs values',
            parameters_single_value=parameters_single_value,
            parameters_multiple_values=parameters_multiple_values,
            other_parameters=other_parameters,
            nruns=nruns)


# Cell
import shutil
import os

def remove_previous_experiments():
    em = DummyExperimentManager ()
    path_results = em.get_path_experiments()
    if os.path.exists(path_results):
        shutil.rmtree(path_results)