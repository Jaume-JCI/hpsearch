# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_tests/config/tst.manager_factory.ipynb (unless otherwise specified).

__all__ = ['test_get_experiment_manager', 'test_write_manager', 'test_register_manager']

# Cell
import pytest
import pandas as pd
import os
import joblib
from IPython.display import display
from block_types.utils.nbdev_utils import md

from hpsearch.config.manager_factory import *
from hpsearch.examples.example_experiment_manager import ExampleExperimentManager

# Comes from manager_factory.ipynb, cell
def test_get_experiment_manager ():
    factory = ManagerFactory ()
    factory.delete_and_reset_all()
    em = factory.get_experiment_manager()
    assert em.__class__.__name__ == 'ExperimentManager'

# Comes from manager_factory.ipynb, cell
def test_write_manager ():
    factory = ManagerFactory ()
    factory.delete_and_reset_all()
    # we check that the file does not exist before writting it
    assert not os.path.exists(factory.destination_path_module)

    # we write new module and check that the file exists afterwards
    em = ExampleExperimentManager()
    factory.register_manager (em)
    factory.write_manager (em)
    assert os.path.exists(factory.destination_path_module)

    # we check that the written module corresponds to the class ExampleExperimentManager
    from hpsearch.app_config.subclassed_manager_import import Manager
    em2 = Manager()
    # TODO: error in pytest
    #assert Manager.__name__ == 'ExampleExperimentManager'
    #assert em2.__class__.__name__ == em.__class__.__name__
    #assert em.get_default_parameters({}) == em2.get_default_parameters({})

    # After writting the subclass, the method `get_experiment_manager`
    # returns an instance of this subclass. This allows command-line
    # scripts to use functions of the subclass indicated by other modules.
    em.register_and_store_subclassed_manager()
    em2 = factory.get_experiment_manager()
    assert em2.__class__.__name__ == em.__class__.__name__

# Comes from manager_factory.ipynb, cell
def test_register_manager ():
    from hpsearch.config.manager_factory import ManagerFactory
    factory = ManagerFactory ()
    factory.delete_and_reset_all()

    from hpsearch.experiment_manager import ExperimentManager
    em = ExperimentManager()
    factory.register_manager(em)
    em2 = factory.get_experiment_manager()
    assert em2.__class__.__name__ == 'ExperimentManager'

    em = ExampleExperimentManager()
    factory.register_manager(em)
    em2 = factory.get_experiment_manager()
    assert em2.__class__.__name__ == 'ExampleExperimentManager'

    # We check that a module registered in one module is used in another one.
    del ManagerFactory
    from hpsearch.config.manager_factory import ManagerFactory

    factory = ManagerFactory()
    em = factory.get_experiment_manager()
    assert em.__class__.__name__ == 'ExampleExperimentManager'

    defaults=em.get_default_parameters({})

    # We check that the defaults are removed properly by using remove_defaults
    from hpsearch.utils.experiment_utils import remove_defaults

    removed=remove_defaults(defaults)
    assert removed=={}

    removed=remove_defaults({'my_first':50, 'my_second':10, 'my_third':30})
    assert removed=={'my_first': 50, 'my_third': 30}
    removed

    # We check that no defaults are removed if the base class ExperimentManager
    # is registered
    em3 = ExperimentManager(allow_base_class=True)
    factory.register_manager(em3)
    parameters = {'my_first':50, 'my_second':10, 'my_third':30}
    parameters_copy = parameters.copy()
    removed=remove_defaults(parameters_copy)
    assert removed==parameters